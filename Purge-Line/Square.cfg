#side_length is the side length of the outside square
#speed is the speed it will be printer at. Dont set it too fast because it wont have time to cool down.
#inside_square is the side length of the small inside square in the middle, recommended to have it more or equal to 1. Dont set this to a negative number.

#this purge also takes into account your nozzle diameter.

[gcode_macro _SQUARE_PURGE]
variable_i: 0 #dont change
variable_side_length: 15 #the side length of the square
variable_speed: 10 #speed of the square printing. 10 is recommened if not using part cooling fans.
variable_inside_square: 1 #side length of the empty square in the middle
gcode:

    {% if side_length < 0 or inside_square < 0 %}
        RESPOND TYPE=error MSG="Inadequite settings, stopping print"
        CANCEL_PRINT
        G91
        G1 Z10 F800
    {% endif %}

    {% set printer_x_max = printer.toolhead.axis_maximum.x | int %}    #printer max and min
    {% set printer_y_max = printer.toolhead.axis_maximum.y | int %}

    {% set nozzle = printer.configfile.settings.extruder.nozzle_diameter*1.5 %}

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = (all_points | map(attribute=0) | min ) %}
    {% set x_max = (all_points | map(attribute=0) | max ) %}         #find max and min of the objects
    {% set y_min = (all_points | map(attribute=1) | min ) %}         #this was taken from kamp
    {% set y_max = (all_points | map(attribute=1) | max ) %}

    {% set mid_to_corner = (side_length/(2**0.5)) | float %}  #(16**0.5) returns square root of 16

    {% if x_min-mid_to_corner*2+3 > 0 and y_min-mid_to_corner*2+3 > 0 %}
        {% set origin_x = x_min-(mid_to_corner+3) %}
        {% set origin_y = y_min-(mid_to_corner+3) %}
    {% elif x_max+(mid_to_corner)*2+3 < printer_x_max and y_max+(mid_to_corner)*2+3 < printer_y_max %}
        {% set origin_x = x_max+mid_to_corner+3 %}            #find the origin of the purge
        {% set origin_y = y_max+mid_to_corner+3 %}
    {% else %}
        RESPOND TYPE=error MSG="Objects too large to fit purge line, continuing without"
    {% endif %}

    {% set loops = ((mid_to_corner-inside_square)/nozzle) | int %}         #find how many little squares can fit inside

    M83 #set extruder to relative

    G1 Z5 F800
    G1 X{origin_x} Y{origin_y+mid_to_corner} F6000 #move to initial position
    G1 Z0.2 F800

    {% for i in range(0, loops) %}
        {% if loop.first %}
            G1 X{origin_x+mid_to_corner-nozzle*i} Y{origin_y} Z0.2 F{speed*60} E{side_length/24}
        {% else %}
            G1 X{origin_x+mid_to_corner-nozzle*i} Y{origin_y} Z0.2 F{speed*60} E{(((mid_to_corner-nozzle*i)**2)*2)**0.5/16}
        {% endif %}
        G1 X{origin_x} Y{origin_y-mid_to_corner+nozzle*i} F{speed*60} E{(((mid_to_corner-nozzle*i)**2)*2)**0.5/16}
        G1 X{origin_x-mid_to_corner+nozzle*i} Y{origin_y} F{speed*60} E{(((mid_to_corner-nozzle*i)**2)*2)**0.5/16} #move things, relies heavily on pythagorean theorem
        G1 X{origin_x} Y{origin_y+mid_to_corner-nozzle*i} F{speed*60} E{(((mid_to_corner-nozzle*i)**2)*2)**0.5/16}
        SET_GCODE_VARIABLE MACRO=_SQUARE_PURGE VARIABLE=i VALUE={i+1}
    {% endfor %}

    SET_GCODE_VARIABLE MACRO=_SQUARE_PURGE VARIABLE=i VALUE=0

    {% if printer.firmware_retraction is defined %}
        G10
    {% else %}
        G1 E-2 F1500
    {% endif %}
    
    G1 Z2 F800 #move up a bit so the nozzle doesnt scratch the bed. Ask me how i know c: